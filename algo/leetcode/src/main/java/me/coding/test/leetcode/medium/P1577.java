package me.coding.test.leetcode.medium;

import java.util.HashMap;
import java.util.Map;

public class P1577 {

    // https://leetcode.com/problems/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers/
    public static void main(String[] args) {
        var problem = new P1577();
        System.out.println(problem.numTriplets(
            new int[]{100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000}, 
            new int[]{}
            ));
        System.out.println(problem.numTriplets(new int[]{43024,99908}, new int[]{1864}));
        System.out.println(problem.numTriplets(new int[]{7,4}, new int[]{5,2,8,9}));
        System.out.println(problem.numTriplets(new int[]{1,1}, new int[]{1,1,1}));
        System.out.println(problem.numTriplets(new int[]{7,7,8,3}, new int[]{1,2,9,7}));
    }

    public int numTriplets(int[] nums1, int[] nums2) {
        Map<Long, Integer> squareNums = new HashMap<>();

        int foundCase = 0;

        for(int i=0; i<nums1.length; i++) {
            long key = (long)nums1[i] * nums1[i];
            squareNums.putIfAbsent(key, 0);
            squareNums.computeIfPresent(key, (k, v)->v+1);
        }

        for(int i=0; i<nums2.length; i++) {
            for(int j=i+1; j<nums2.length; j++) {
                long value = (long)nums2[i] * nums2[j];
                foundCase = foundCase + squareNums.getOrDefault(value, 0);
            }
        }

        squareNums.clear();

        for(int i=0; i<nums2.length; i++) {
            long key = (long)nums2[i] * nums2[i];
            squareNums.putIfAbsent(key, 0);
            squareNums.computeIfPresent(key, (k, v)->v+1);
        }

        for(int i=0; i<nums1.length; i++) {
            for(int j=i+1; j<nums1.length; j++) {
                long value = (long)nums1[i] * nums1[j];
                foundCase = foundCase + squareNums.getOrDefault(value, 0);
            }
        }

        return foundCase;
    }
}
